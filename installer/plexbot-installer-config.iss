; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "Plexbot Encoder"
#define MyAppVersion GetEnv('RELEASE_VERSION')
#define MyAppPublisher "Celestial Data Hosting"
#define MyAppURL "https://github.com/brandan-schmitz/plexbot-encoder"
#define MyAppExeName "plexbot-encoder-win64.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{136081CB-4296-423A-B5CF-B211B7E5A785}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={autopf}\plexbot-encoder
DefaultGroupName={#MyAppName}
DisableDirPage=no
DisableWelcomePage=no
LicenseFile=license.txt
PrivilegesRequired=admin
OutputBaseFilename=plexbot-encoder_v{#MyAppVersion}
Compression=lzma
SolidCompression=yes
WizardStyle=modern
ChangesEnvironment=yes

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Files]
Source: "{#MyAppExeName}"; DestDir: "{app}"; Flags: ignoreversion
Source: "plexbot-encoder.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "plexbot-encoder.xml"; DestDir: "{app}"; Flags: ignoreversion
Source: "ffmpeg.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "ffplay.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "ffprobe.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "application.yaml"; DestDir: "{app}\config"; Flags: ignoreversion

[InstallDelete]
Type: files; Name: "{app}\config\application.yaml"
Type: files; Name: "{app}\plexbot-encoder.xml"

[Icons]
Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{group}\{cm:UninstallProgram,{#MyAppName}}"; Filename: "{uninstallexe}"

[Run]
Filename: "{app}\plexbot-encoder.exe"; Parameters: "start"; WorkingDir: "{app}"; Flags: postinstall runascurrentuser runhidden

[Code]
const PathEnvironmentKey = 'SYSTEM\CurrentControlSet\Control\Session Manager\Environment';
var
  ApiInfoPage: TInputQueryWizardPage;
  GpuTypePage: TInputOptionWizardPage;
  CrfPage: TInputQueryWizardPage;
  ServicePage: TInputOptionWizardPage;
  WorkDirPage: TInputDirWizardPage;

procedure InitializeWizard();
begin
  { Create the API information page to collect information about how to connect to the API }
  ApiInfoPage := CreateInputQueryPage(wpLicense, 'API Connection Information', 'You should obtain these settings from the person running your Plexbot instance.',
    'Please specify the name of this encoding agent, the URL of your Plebot API, and your Plexbot API credentials then click Next.');
  ApiInfoPage.Add('Agent Name:', False);
  ApiInfoPage.Add('API Address:', False);
  ApiInfoPage.Add('Username:', False);
  ApiInfoPage.Add('Password:', False);

  { Set default values, loading settings used in previous installs if possible }
  ApiInfoPage.Values[0] := GetPreviousData('Agent Name', '');
  ApiInfoPage.Values[1] := GetPreviousData('API Address', '');
  ApiInfoPage.Values[2] := GetPreviousData('Username', '');
  ApiInfoPage.Values[3] := GetPreviousData('Password', '');

  { Create the GPU type selection page to collect information about what type of GPU is in use }
  GpuTypePage := CreateInputOptionPage(ApiInfoPage.ID, 'GPU Hardware Acceleration',
    'Using a GPU can accelerate the encoding process. Does your computer have a GPU?',
    'Please select the GPU type if your computer has one otherwise select None and then click Next.', True, False);
  GpuTypePage.Add('None');
  GpuTypePage.Add('Nvidia');
  GpuTypePage.Add('AMD');

  { Set the defult selection, loading settings used in previous installs if possibe }
  case GetPreviousData('GpuType', '') of
    'None': GpuTypePage.SelectedValueIndex := 0;
    'Nvidia': GpuTypePage.SelectedValueIndex := 1;
    'AMD': GpuTypePage.SelectedValueIndex := 2;
  else
    GpuTypePage.SelectedValueIndex := 0;
  end;

  { Create the CRF settings page to collect information about what CRF setting to use }
  CrfPage := CreateInputQueryPage(GpuTypePage.ID, 'Constant Rate Factor',
    'The Constant Rate Factor is used by the encoder to determine the quality of the encoding. The higher the number the smaller the file and worse the quality will be. Valid numbers are between 0 and 51.',
    'Please specify a valid (0-51) CRF and click Next.');
  CrfPage.Add('Constant Rate Factor:', False);

  { Set the default value for the CRF or obtain it from a previous installation if possibe }
  CrfPage.Values[0] := GetPreviousData('CRF', '23');

  { Create the service start setting page }
  ServicePage := CreateInputOptionPage(CrfPage.ID, 'Service Configuration', 'This application gets installed as a service. You can configure the startup options below.',
    'Please select the startup option for this service and then click Next.', True, False);
  ServicePage.Add('Automatic (starts when your computer does)');
  ServicePage.Add('Manual (requires you to manually start and stop the service)');

  { Set the default selection, loading settings used in previous installs if possible }
  case GetPreviousData('ServiceType', '') of
    'Automatic': ServicePage.SelectedValueIndex := 0;
    'Manual': ServicePage.SelectedValueIndex := 1;
  else
    ServicePage.SelectedValueIndex := 0;
  end;

  { Create the Work directory selection page }
  WorkDirPage := CreateInputDirPage(wpSelectDir, 'Work Directory', 'Where should the working files (media files being processed) be stored?',
    'Select the folder to use as a working directory then click Next.', False, '');
  WorkDirPage.Add('');

  { Set the default work directory to be in a plexbot-encoder folder in the users home folder. }
  WorkDirPage.Values[0] := GetPreviousData('WorkDir', ExpandConstant('{userappdata}\plexbot-encoder'));
end;

procedure RegisterPreviousData(PreviousDataKey: Integer);
var
  GpuType: String;
  ServiceType: String;
begin
  { Store the API connection page information }
  SetPreviousData(PreviousDataKey, 'Agent Name', ApiInfoPage.Values[0]);
  SetPreviousData(PreviousDataKey, 'API Address', ApiInfoPage.Values[1]);
  SetPreviousData(PreviousDataKey, 'Username', ApiInfoPage.Values[2]);
  SetPreviousData(PreviousDataKey, 'Password', ApiInfoPage.Values[3]);

  { Store the GpuType page information }
  case GpuTypePage.SelectedValueIndex of
    0: GpuType := 'None';
    1: GpuType := 'Nvidia';
    2: GpuType := 'AMD';
  end;
  SetPreviousData(PreviousDataKey, 'GpuType', GpuType);

  { Store the CRF page information }
  SetPreviousData(PreviousDataKey, 'CRF', CrfPage.Values[0]);

  { Store the Service page information }
  case ServicePage.SelectedValueIndex of
    0: ServiceType := 'Automatic';
    1: ServiceType := 'Manual';
  end;
  SetPreviousData(PreviousDataKey, 'ServiceType', ServiceType);

  { Store the working directory page information }
  SetPreviousData(PreviousDataKey, 'WorkDir', WorkDirPage.Values[0]);
end;

function NextButtonClick(CurPageID: Integer): Boolean;
begin
  if CurPageID = ApiInfoPage.ID then begin
    if ApiInfoPage.Values[0] = '' then begin
      MsgBox('You must enter a agent name for this encoder.', mbError, MB_OK);
      Result := False;
    end else if ApiInfoPage.Values[1] = '' then begin
      MsgBox('You must enter a API address that this encoder will connect too.', mbError, MB_OK);
      Result := False;
    end else if ApiInfoPage.Values[2] = '' then begin
      MsgBox('You must enter the username this encoder will use to access the API.', mbError, MB_OK);
      Result := False;
    end else if ApiInfoPage.Values[3] = '' then begin
      MsgBox('You must enter the password this encoder will use to access the API.', mbError, MB_OK);
      Result := False;
    end else begin
      Result := True;
    end;
  end else if CurPageID = CrfPage.ID then begin
    if CrfPage.Values[0] = '' then begin
      MsgBox('You must enter a valid number for the CRF. Valid numbers are 0 thru 51.', mbError, MB_OK);
      Result := False;
    end else begin
      Result := True;
    end;
  end else
    Result := True;
end;

procedure CurPageChanged(CurPageID: Integer);
var
  GpuType: String;
  ServiceType: String;
begin
  if CurPageID = wpReady then begin
    { Add an extra line to separate default contents from custom contents }
    Wizardform.ReadyMemo.Lines.Add('');

    { Add the work directory setting }
    Wizardform.ReadyMemo.Lines.Add('Work Directory:');
    Wizardform.ReadyMemo.Lines.Add('      ' + WorkDirPage.Values[0]);
    Wizardform.ReadyMemo.Lines.Add('');

    { Add the API connection settings }
    Wizardform.ReadyMemo.Lines.Add('API Connection Settings:');
    Wizardform.ReadyMemo.Lines.Add('      Agent Name: ' + ApiInfoPage.Values[0]);
    Wizardform.ReadyMemo.Lines.Add('      API Address: ' + ApiInfoPage.Values[1]);
    Wizardform.ReadyMemo.Lines.Add('      Username: ' + ApiInfoPage.Values[2]);
    Wizardform.ReadyMemo.Lines.Add('      Password: '+ ApiInfoPage.Values[3]);
    Wizardform.ReadyMemo.Lines.Add('');

    { Add the GPU Type setting }
    Wizardform.ReadyMemo.Lines.Add('GPU Type:');
    case GpuTypePage.SelectedValueIndex of
      0: GpuType := 'None';
      1: GpuType := 'Nvidia';
      2: GpuType := 'AMD';
    end;
    Wizardform.ReadyMemo.Lines.Add('      ' + GpuType);
    Wizardform.ReadyMemo.Lines.Add('');

    { Add the CRF setting }
    Wizardform.ReadyMemo.Lines.Add('Constant Rate Factor');
    Wizardform.ReadyMemo.Lines.Add('      ' + CrfPage.Values[0]);
    Wizardform.ReadyMemo.Lines.Add('');

    { Add the service type setting }
    Wizardform.ReadyMemo.Lines.Add('Service Type:');
    case ServicePage.SelectedValueIndex of
      0: ServiceType := 'Automatic';
      1: ServiceType := 'Manual';
    end;
    Wizardform.ReadyMemo.Lines.Add('      ' + ServiceType);
    Wizardform.ReadyMemo.Lines.Add('');
  end;
end;

procedure WriteConfiguration();
var
  GpuType: String;
  WorkDir: String;
  WorkerName: String;
  ApiAddress: String;
  Username: String;
  Password: String;
  Crf: String;
  FileName: String;
  ServiceFileName: String;
  ServiceType: String;
  ConfigLines: TArrayOfString;
  ServiceConfigLines: TArrayOfString;
begin
  { Get the worker name setting }
  WorkerName := AddQuotes(ApiInfoPage.Values[0]);

  { Get the API address setting }
  ApiAddress := AddQuotes(ApiInfoPage.Values[1]);

  { Get the username setting }
  Username := AddQuotes(ApiInfoPage.Values[2]);

  { Get the password setting }
  Password := AddQuotes(ApiInfoPage.Values[3]);

  { Get the GPU type setting }
  case GpuTypePage.SelectedValueIndex of
    0: GpuType := 'none';
    1: GpuType := 'nvidia';
    2: GpuType := 'amd';
  end;

  { Get the CRF setting }
  Crf := CrfPage.Values[0];

  { Get the working directory setting }
  WorkDir := AddBackslash(WorkDirPage.Values[0]);
  StringChangeEx(WorkDir, '\', '/', True);

  { Determine the flename of the config }
  FileName := ExpandConstant('{app}\config\application.yaml');

  { Build the array of config settings to write }
  SetArrayLength(ConfigLines, 7);
  ConfigLines[0] := '  workerName: ' + WorkerName;
  ConfigLines[1] := '  apiAddress/mp-rest/url: ' + ApiAddress;
  ConfigLines[2] := '  username: ' + Username;
  ConfigLines[3] := '  password: ' + Password;
  ConfigLines[4] := '  crf: ' + Crf;
  ConfigLines[5] := '  accelerationHardware: ' + GpuType;
  ConfigLines[6] := '  tempFolder: ' + WorkDir + 'work/';

  { Write the lines to the config file }
  SaveStringsToFile(FileName, ConfigLines, true);

  { Determine the filename of the service config }
  ServiceFileName := ExpandConstant('{app}\plexbot-encoder.xml');

  { Get the service type setting }
  case ServicePage.SelectedValueIndex of
    0: ServiceType := 'Automatic';
    1: ServiceType := 'Manual';
  end;

  { Write the line to the config file }
  SetArrayLength(ServiceConfigLines, 3);
  ServiceConfigLines[0] := '  <logpath>' + WorkDirPage.Values[0] + '\logs' + '</logpath>';
  ServiceConfigLines[1] := '  <startmode>' + ServiceType + '</startmode>';
  ServiceConfigLines[2] := '</service>';
  SaveStringsToFile(ServiceFileName, ServiceConfigLines, true);
end;

procedure CreateWorkDirectories();
var
  WorkDir: String;
begin
  { Get the working directory setting }
  WorkDir := WorkDirPage.Values[0];

  { Create the base work folder if it does not exist }
  if not DirExists(WorkDir) then begin
    CreateDir(WorkDir);
  end;

  { Create the logs folder if it does not exist }
  if not DirExists(WorkDir + '\logs') then begin
    CreateDir(WorkDir + '\logs');
  end;

  { Create the work folder if it does not exist }
  if not DirExists(WorkDir + '\work') then begin
    CreateDir(WorkDir + '\work');
  end;
end;

procedure EnvAddPath(Path: string);
var
  Paths: string;
begin
  { Retrieve current path (use empty string if entry not exists) }
  if not RegQueryStringValue(HKEY_LOCAL_MACHINE, PathEnvironmentKey, 'Path', Paths) then
    Paths := '';

  { Skip if string already found in path }
  if Pos(';' + Uppercase(Path) + ';', ';' + Uppercase(Paths) + ';') > 0 then
    exit;

  { App string to the end of the path variable }
  Paths := Paths + ';'+ Path +';'

  { Overwrite (or create if missing) path environment variable }
  if RegWriteStringValue(HKEY_LOCAL_MACHINE, PathEnvironmentKey, 'Path', Paths) then
    Log(Format('The [%s] added to PATH: [%s]', [Path, Paths]))
  else
    Log(Format('Error while adding the [%s] to PATH: [%s]', [Path, Paths]));
end;

procedure EnvRemovePath(Path: string);
var
  Paths: string;
  P: Integer;
begin
  { Skip if registry entry not exists }
  if not RegQueryStringValue(HKEY_LOCAL_MACHINE, PathEnvironmentKey, 'Path', Paths) then
    exit;

  { Skip if string not found in path }
  P := Pos(';' + Uppercase(Path) + ';', ';' + Uppercase(Paths) + ';');
  if P = 0 then
    exit;

  { Update path variable }
  Delete(Paths, P - 1, Length(Path) + 1);

  { Overwrite path environment variable }
  if RegWriteStringValue(HKEY_LOCAL_MACHINE, PathEnvironmentKey, 'Path', Paths) then
    Log(Format('The [%s] removed from PATH: [%s]', [Path, Paths]))
  else
    Log(Format('Error while removing the [%s] from PATH: [%s]', [Path, Paths]));
end;

procedure CurStepChanged(CurStep: TSetupStep);
var
  ResultCode: Integer;
begin
  if CurStep = ssPostInstall then begin
    WriteConfiguration();
    CreateWorkDirectories();
    EnvAddPath(ExpandConstant('{app}'));
    Exec('>', ExpandConstant('{app}\plexbot-encoder.exe install'), ExpandConstant('{app}'), SW_HIDE, ewWaitUntilTerminated, ResultCode);
  end;
end;

procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
var
  ResultCode: Integer;
begin
  if CurUninstallStep = usPostUninstall then begin
    EnvRemovePath(ExpandConstant('{app}'));
  end else if CurUninstallStep = usUninstall then begin
    Exec('>', ExpandConstant('{app}\plexbot-encoder.exe stop'), ExpandConstant('{app}'), SW_HIDE, ewWaitUntilTerminated, ResultCode);
    Exec('>', ExpandConstant('{app}\plexbot-encoder.exe uninstall'), ExpandConstant('{app}'), SW_HIDE, ewWaitUntilTerminated, ResultCode);
  end;
end;